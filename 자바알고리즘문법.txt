공식
	n 이하의 모든 합 == n(n+1) / 2
	조합 n개중에 n가지를 "뽑는" 갯수(중복 없음) == nCn2 // n2의 수만큼  분자 - n*(n-1)..., 분모 - n2*(n2-1)...
	순열 n개중에 n개로 "나열"하는 갯수(중복 포함) == nPn2 // n2의 수만큼 분자 - n*(n-1) 끝
	
	약수 최적화
		for(int j=1; j*j<=i; j++){
			if(j*j == i){cnt++;}
			else if(i % j == 0){cnt+=2;}
		}
	
Set
	set.add(data); // 데이터 추가
	set.remove(n); // 값 n 제거
	set.clear(); // 값 전체 제거
	set.size(); // 갯수 반환
	System.out.println(set); // 값 전체 출력
	Iterator iter = set.iterator();
	Set<Integer> set = new HashSet<Integer>(Arrays.asList(arr)); // arr to Set
	Integer[] arr = set.toArray(new Integer[0]); // Set to arr
	
Map
	map.put();
	hashMap.entrySet().toArray(); // 키+값 을 배열로 변환
	hashMap.keySet().toArray(new String[0]); // 키값을 배열로 반환
	hashMap.values().toArray(new String[0]); // 값을 배열로 반환

HASH

Stack
	Stack<Integer> st = new Stack<>();
	st.push(n); // 값 추가
	st.pop(); // 값 제거
	st.clear(); // 초기화
	st.peek(); // 마지막 값 조회
	st.size(); // 사이즈 확인
	st.empty(); // 비어있는지 확인 비어있으면 true
	st.contains(n); // n값이 있는지 확인 있으면 true
	
ArrayBlockingQueue
	add - 추가
	put - 여유 공간이 생길 때까지 대기 후 객체 추가
	offer - 예외 없이 아이템 추가
	take - 아이템을 삭제하고 그 값을 리턴한다. 비어있는 경우 InterruptedffException발생
	poll - 객체 리턴될 대까지 일정 시간 대기
	
PriorityQueue 우선순위 큐 (FIFO) 
	PriorityQueue<Integer> priorityQueueLowest = new PriorityQueue<>();
	PriorityQueue<Integer> priorityQueueHighest = new PriorityQueue<>(Collections.reverseOrder());
	add(n); // 값추가
	poll(); // 첫번째 값을 반환하고 제거 비어있다면 null
	remove(); // 첫번째 값 제거
	clear(); // 초기화
	peek(); // 우선 순위가 제일 높은 데이터 반환
	
	
BigInteger, BigDecimal // long, double보다 큰 숫자형 계산
	BigInteger.valueOf(n) // 선언 n = 100 정수, "100" 문자열, ("64", 16) 16진수 
	b.intValue() // Big to int
	b.longValue(); //BigIntger -> long
	b.floatValue(); //BigIntger -> float
	b.doubleValue(); //BigIntger -> double
	b.toString(); //BigIntger -> String
	b.add(n) // 덧셈
	b.subtract(n) // 뺄셈
	b.multiply(n) // 곱셈
	b.divide(n) // 나눗셈
	b.remainder(n) // 나머지
	b.gcd(n) // 최대공약수
	b.byteValue(n) // 바이트값
	
Character
	Character.toString(arr); // char arr to String
	Character.isDigit(char); // 숫자인지 확인
	Character.getNumericValue(char); // Char to int
	(int)char; // 아스키 to 10진수
	Character.toUpperCase(); 전부 대문자로 변경
	Character.toLowerCase(); 전부 소문자로 변경
	Character.isUpperCase(char); 대문자 인지 확인
	Character.isLowerCase(char); 소문자 인지 확인
int
	a.compareTo(b); // a가 b보다 크면 1, 같으면 0, 작으면 -1
	(char)int; // 10진수 to 아스키코드 문자
	Integer.compare(a, b); // a가 b보다 크면 1, 같으면 0, 작으면 -1
	Integer.parseInt(String); //String to int
	Integer.parseInt(String, 2); // String 2진수 to 10진수
	Integer.toBinaryString(2진수); // 2진수 to String
	arr[i] = Integer.toBinaryString(string | string);
	Integer.valueOf(String); //String to int
	Integer.toString(int); //int to String
	Integer.toString(int, n) // int 10진수 to n진수
	Integer.toHexString(int) // int to 16진수
	Integer.bitCount(n); // true인 비트갯수 반환
	

String
	String.isEmpty(); // 문자열이 빈 문자열인지 확인
	String.isBlank(); // 문자열이 빈 문자열 or 공백만 같는 문자열인지 확인
	String.matches(""); // 해당 정규식 있는지 확인
	String.repeat(n); // n번 반복
	String.length(); // 길이 구하기
	String.toCharArray();
	String.equals(string); // string이랑 똑같은지 확인
	String.contains(string); // string이 포함되어 있는지 확인
	String.trim(); 공백 제거
	String.join("", list); // list 요소 사이사이에 ""를 넣어서 String으로 반환
	String.valueOf(); // null이라는 문자열 치환
	String.toUpperCase(); 전부 대문자로 변경
	String.toLowerCase(); 전부 소문자로 변경
	String.isUpperCase(char); 대문자 인지 확인
	String.isLowerCase(char); 소문자 인지 확인
	string.startsWith("a"); // 첫글자가 0인경우
	string.substring(b); b미만인경우 제거
	String.substring(a, b); a이상 b미만으로 문자열 자르기
	String.charAt(string(index)); 문자열중에 글자하나를 가져올때 사용하는방법
	String.toCharArray(); 문자열을 char배열로 바꾸는방법
	String.replaceFirst("정규식","after"); 문자열 중에 처음으로 나오는부분 수정
	String.replace("before","after"); 문자열 중에 처음으로 나오는부분 수정
	String.replaceAll("정규식","after"); 문자열 전체 변경
	
Arrays
	Arrays.asList(array); // array를 list로 반환
	Arrays.sort(array); // 오름차순 정렬
	Arrays.sort(array, Collections.reverseOrder()); // 내림차순 정렬
	Arrays.copyOfRange(numbers, num1, num2 + 1); numbers Array의 num1부터 시작해서 num2까지 반환
	Arrays.toString(array); // array 데이터 전체 출력
	
	
List
	list.get(n); // n번째 데이터 조회
	list.removeIf(String::isEmpty); // 비어있는값인 경우 주소값 제거
	list.add("");
	list.size(); // 원소의 개수
	list.set(int,""); int의 자리에 ""를 넣음, 뒤에 있는 데이터는 한자리씩 밀려남
	list.remove(n); // 값 제거
	list.removeAll(); // 값 전체 제거
	list.contains("") 문자열중에 해당글자가 있는지 확인
	list.indexOf(string); // string 문자열이 있는 위치 반환
	list.clear(); 내용 전체삭제
	list.toArray(); list to array
	iterator(); iterator 생성자
		Iterator<T> it = list.iterator();
		hasNext(); 다음 데이터 있는지 확인
		next(); 다음 데이터 가져오기
	list.sort(Comparator.naturalOrder()); 오름차순 정렬
	list.sort(Comparator.reverseOrder()); 내림차순 정렬
	list.sort(String.CASE_INSENSITIVE_ORDER); 대소문자 구분없이 오름차순 정렬
	list.sort(Collections.reverseOrder(String.CASE_INSENSITIVE_ORDER)); 대소문자 구분없이 내림차순 정렬

Collections
	Collections.max(list); // list 최대값
	Collections.min(list); // list 최소값
	Collections.shuffle(list); //list 셔플
	Collections.swap(list, num1, num2); //num1번째, num2번째 교환
	Collections.reverse(list); //배열 반대로 뒤집기
	Collections.reverseOrder(); //정렬 반대로
	Collections.frequency(list, n); // 리스트에 중복값이 몇개인지 확인
	
StringBuffer, StringBuilder
	sb.append(""); // 요소 추가
	sb.reverse(); // 배열 뒤집기
	sb.toString(); // sb to String
	sb.setLength(0); // 초기화
	sb.deleteCharAt(sb.length() - 1); // 문자열 한글자 제거
	sb.delete(a,b); // a이상 b미만 문자열 범위 제거
	
Math	
	Math.log10(n); // n의 자릿수
	Math.pow(a,b); // a의 b제곱
	Math.sqrt(n); // n의 제곱근
	Math.abs(n); // n의 절대값
	Math.min(n, n2); // 작은수 반환
	Math.max(n, n2); // 큰수 반환
	
LocalDate
	LocalDate date = LocalDate.of(2021, 12, 25); // 2021년 12월 25일 날짜 생성
	DayOfWeek dayOfWeek = date.getDayOfWeek();
	int dayOfWeekNumber = dayOfWeek.getValue();