싱글턴 패턴 (Singletom Pattern)
	특정 클래스에 객체 인스턴스가 하나만 만들어지도록 사용한다
	전역 변수를 사용할 때와 마찬가지로 객체 인스턴스를 어디서든지 액세스 할 수 있게 만들 수 있다.
	
추상 팩토리 패턴 (Abstract Factory Pattern)
	클라이언트는 모든 구상 팩토리에서 구현해야하는 인터페이스를 참조하고,
	구상 팩토리는 서브 인터페이스에 있는 서브 클래스에서 구현한다.
	
팩토리 메소드 패턴 (Factory Method Pattern)
	객체를 생성 할때 필요한 인터페이스를 만들고 어떤 클래스의 인스턴스를 만들지는 서브 클래스에서 결정한다.
	이 패턴을 사용하면 클래스 인스턴스 만드는 일을 서브 클래스에게 맡기게 된다.
	
데코레이터 패턴 (Decorator Pattern)

프록시 패턴 (Proxy Pattern)

	1:n 개념으로 새로운 기능 추가가 목적으로, 요청,응답값을 중간에 변형하거나 메서드 수행 시간을 출력하는 등의 작업을 한다.
	
프록시 패턴 (Proxy Pattern)
	1:1 개념으로 접근제어가 목적으로, 캐싱을 위해 자주 사용되며, 동일한 데이터를 반환하지만 시스템에 큰 부하를 줄 경우 사용하는 패턴.
	
컴포지트 패턴 (Composite Pattern)


